<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sql.FsMapper">
    <update id="createUserFs">
        create table fs_struct_${owner}
        (
            id        bigserial                    not null primary key,
            parent_id bigint                       not null,
            name      text,
            type      text    default 'DIR':: text not null,
            ref_id    text    default '--':: text  not null,
            selected  boolean default false,
            found     boolean default false,
            options   int     default 0
        )
    </update>

    <insert id="createRoot">
        insert into fs_struct_${owner} (parent_id, name)
        values (0, '')
    </insert>

    <update id="createTree">
        create or replace view fs_tree_${owner} (id, parent_id, path) as
        (
        WITH RECURSIVE tree AS
                           (
                               SELECT id,
                                      name,
                                      parent_id,
                                      ARRAY [name] AS fpath
                               FROM fs_struct_${owner}
                               WHERE parent_id = 0
                               UNION ALL
                               SELECT si.id,
                                      si.name,
                                      si.parent_id,
                                      sp.fpath || si.name As fpath
                               FROM fs_struct_${owner} As si
                                        JOIN
                                    tree AS sp
                                    ON (si.parent_id = sp.id)
                           )
        SELECT id, parent_id, array_to_string(fpath, '/')
        FROM tree)
    </update>

    <insert id="mkDir">
        insert into fs_struct_${owner} (parent_id, name, type)
        values (#{parentId} , #{name} , #{type} )
    </insert>

    <delete id="dropOrphans">
        delete
        from fs_struct_${owner}
        where id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                          ARRAY [name] AS fpath
                                   FROM fs_struct_${owner}
                                   WHERE parent_id = #{id}
                                   UNION ALL
                                   SELECT si.id,
                                          si.name,
                                          si.parent_id,
                                          sp.fpath || si.name As fpath
                                   FROM fs_struct_${owner} As si
                                            JOIN
                                        tree AS sp
                                        ON (si.parent_id = sp.id)
                               )
            SELECT id
            FROM tree)
    </delete>

    <insert id="mkFile">
        insert into fs_struct_${owner} (parent_id, name, type, ref_id)
        values (#{file.parentId} , #{file.name} , #{file.type} , #{file.refId} )
    </insert>

    <select id="getEntry" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.id = #{id}
    </select>

    <sql id="struct">
        f.id,
               f.parent_id as "parentId",
               f.name,
               f.type,
               f.ref_id        as "refId",
               f.selected,
               f.found,
               f.options,
               ft.path
        from fs_struct_${owner} f
                 left outer join fs_tree_${owner} ft on f.id = ft.id
    </sql>

    <delete id="dropEntry">
        delete
        from fs_struct_${owner}
        where id = #{id}
    </delete>

    <select id="findEntryAt" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.name = #{name} and f.parent_id = #{parentId}
           limit 1
    </select>

    <update id="updateEntry">
        update fs_struct_${owner}
        set name      = #{name} ,
            parent_id = #{parentId} ,
            options   = #{options}
        where id = #{id}
    </update>

    <select id="listEntries" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.parent_id = #{parentId} order by f.name
    </select>

    <select id="isFsTableExist" resultType="_boolean">
        SELECT EXISTS(SELECT
                      FROM information_schema.tables
                      WHERE table_schema = 'public'
                        AND table_name = 'fs_struct_${userId}'
                   )
    </select>

    <select id="getParentEntry" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.id = (select parent_id from fs_struct_${owner} where id = #{id} )
    </select>

    <delete id="dropEntryByName">
        delete
        from fs_struct_${owner}
        where parent_id = #{parentId}
          and name = #{name}
    </delete>

    <delete id="dropEntries">
        delete
        from fs_struct_${owner}
        where id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>

    <delete id="dropMultiOrphans">
        delete
        from fs_struct_${owner}
        where id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                          ARRAY [name] AS fpath
                                   FROM fs_struct_${owner}
                                   WHERE parent_id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
        UNION ALL SELECT si.id,
                         si.name,
                         si.parent_id,
                         sp.fpath || si.name As fpath
                  FROM fs_struct_${owner} As si
                           JOIN
                       tree AS sp
                       ON (si.parent_id = sp.id)
                      )
            SELECT id
            FROM tree)
    </delete>

    <select id="listTypeEntries" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.parent_id = #{parentId} and type = #{type} order by f.name
    </select>

    <select id="getByIds" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
        order by f.name
    </select>

    <select id="getPredictors" resultType="model.TFile">
        with recursive a as (select head.id, head.parent_id
                             from fs_struct_${owner} head
                             where head.id = #{id}
                             union all
                             select tail.id, tail.parent_id
                             from fs_struct_${owner} tail
                                      join a on tail.id = a.parent_id)
        select a.id, a.parent_id as "parentId"
        from a
    </select>

    <update id="selectChildsByName">
        update fs_struct_${owner}
        set found = true
        where lower(name) like #{query}
          and id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                          ARRAY [name] AS fpath
                                   FROM fs_struct_${owner}
                                   WHERE parent_id = #{id}
                                   UNION ALL
                                   SELECT si.id,
                                          si.name,
                                          si.parent_id,
                                          sp.fpath || si.name As fpath
                                   FROM fs_struct_${owner} As si
                                            JOIN
                                        tree AS sp
                                        ON (si.parent_id = sp.id)
                               )
            SELECT id
            FROM tree)
    </update>

    <update id="resetFound">
        update fs_struct_${owner}
        set found = false
    </update>

    <select id="selectFound" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.found = true
    </select>

    <update id="resetSelection">
        update fs_struct_${owner}
        set selected = false
    </update>

    <delete id="deleteSelected">
        delete
        from fs_struct_${owner}
        where id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                          ARRAY [name] AS fpath
                                   FROM fs_struct_${owner}
                                   WHERE selected = true
                                   UNION ALL
                                   SELECT si.id,
                                          si.name,
                                          si.parent_id,
                                          sp.fpath || si.name As fpath
                                   FROM fs_struct_${owner} As si
                                            JOIN
                                        tree AS sp
                                        ON (si.parent_id = sp.id)
                               )
            SELECT id
            FROM tree)
    </delete>

    <update id="updateSelection">
        update fs_struct_${owner}
        set selected = #{selected}
        where id = #{id}
    </update>

    <select id="getSelected" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.selected = true
    </select>

    <update id="inversListSelection">
        update fs_struct_${owner}
        set selected = exists(select 1 from fs_struct_${owner} where parent_id = #{dirId} and selected = false)
        where parent_id = #{dirId}
    </update>

    <update id="inversFoundSelection">
        update fs_struct_${owner}
        set selected = exists(select 1 from fs_struct_${owner} where found = true and selected = false)
        where found = true
    </update>

    <update id="inversSelection">
        update fs_struct_${owner}
        set selected = not selected
        where id = #{id}
    </update>

    <update id="setExclusiveSelected">
        update fs_struct_${owner}
        set selected = (case when id = #{id} then true else false end)
    </update>

    <select id="selectSharesByDir" resultType="model.Share">
        select
        <include refid="share"/>
        from shares
        where entry_id = #{entryId}
          and owner = #{owner}
          and shared_to != owner
    </select>

    <select id="getLinkShare" resultType="model.Share">
        select
        <include refid="share"/>
        from shares
        where entry_id = #{entryId}
          and owner = #{owner}
        and shared_to = 0
    </select>

    <sql id="share">
        id,
               name,
               entry_id  as "entryId",
               owner,
               shared_to as "sharedTo",
               options,
               untill,
               salt,
               hash
    </sql>

    <select id="isShareIdAvailable" resultType="_boolean">
        select not exists(select 1 from shares where id = #{id} )
    </select>

    <insert id="insertShare">
        insert INTO shares(id, name, entry_id, owner, salt, hash, options, shared_to, untill)
        VALUES (#{id} , #{name} , #{entryId} , #{owner} , #{salt} , #{hash} , #{options} , #{sharedTo} , #{untill} )
    </insert>

    <delete id="deletePublicShare">
        delete
        from shares
        where entry_id = #{entryId}
          and owner = #{owner}
          and shared_to = 0
    </delete>

    <select id="countSharesByDir" resultType="_int">
        select count(*)
        from shares
        where entry_id = #{entryId}
          and owner = #{owner}
    </select>

    <update id="updateShare">
        update shares
        set untill  = #{untill} ,
            salt    = #{salt} ,
            hash    = #{hash} ,
            options = #{options}
        where id = #{id}
    </update>
</mapper>
